import os
from argparse import ArgumentParser

from dotenv import load_dotenv
from tqdm import tqdm
from web3 import Web3

# --- –¶–≤–µ—Ç–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –º–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ---
class Colors:
    HEADER = '\033[95m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    GREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

def consult_the_aether():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–≤—è–∑—å —Å —ç—Ñ–∏—Ä–æ–º (—Å–µ—Ç—å—é Ethereum) –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞–º–µ–Ω–∏–π."""
    load_dotenv()
    infura_project_id = os.getenv("INFURA_PROJECT_ID")
    if not infura_project_id or infura_project_id == "YOUR_INFURA_PROJECT_ID_HERE":
        print(f"{Colors.FAIL}–†–∞–∑—Ä—ã–≤ —Å–≤—è–∑–∏: –ö–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ñ–∏—Ä—É (INFURA_PROJECT_ID) –Ω–µ –Ω–∞–π–¥–µ–Ω.{Colors.ENDC}")
        print(f"–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–∏—Ç—É–∞–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª {Colors.BOLD}.env{Colors.ENDC} —Å –≤–∞—à–∏–º –∫–ª—é—á–æ–º.")
        print("–§–æ—Ä–º—É–ª–∞: INFURA_PROJECT_ID=\"abcdef1234567890\"")
        return None
    
    w3 = Web3(Web3.HTTPProvider(f'https://mainnet.infura.io/v3/{infura_project_id}'))
    
    if not w3.is_connected():
        print(f"{Colors.FAIL}–≠—Ñ–∏—Ä –º–æ–ª—á–∏—Ç... –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.{Colors.ENDC}")
        return None
        
    print(f"{Colors.GREEN}–°–≤—è–∑—å —Å —ç—Ñ–∏—Ä–æ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –û—Ä–∞–∫—É–ª –≥–æ—Ç–æ–≤ —Å–ª—É—à–∞—Ç—å.{Colors.ENDC}")
    return w3

def read_the_omens(w3, focus_address, divination_window):
    """
    –ß–∏—Ç–∞–µ—Ç –∏ —Ç–æ–ª–∫—É–µ—Ç –∑–Ω–∞–º–µ–Ω–∏—è (—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏) –≤–æ–∫—Ä—É–≥ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ñ–æ–∫—É—Å–∞ (–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞).
    """
    try:
        target_focus = w3.to_checksum_address(focus_address)
    except ValueError:
        print(f"{Colors.FAIL}–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ–∫—É—Å: —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞ –∏—Å–∫–∞–∂–µ–Ω.{Colors.ENDC}")
        return

    latest_block_number = w3.eth.block_number
    start_block = latest_block_number - divination_window + 1

    print(f"\n{Colors.HEADER}{Colors.BOLD}üîÆ Onchain Oracle... –ß—Ç–µ–Ω–∏–µ –∑–Ω–∞–º–µ–Ω–∏–π –∏–∑ —ç—Ñ–∏—Ä–∞...{Colors.ENDC}")
    print(f"–§–û–ö–£–° –ì–ê–î–ê–ù–ò–Ø:{Colors.CYAN} {target_focus}{Colors.ENDC}")
    print(f"–û–ö–ù–û –ì–ê–î–ê–ù–ò–Ø:{Colors.CYAN} {divination_window} –±–ª–æ–∫–æ–≤ (–æ—Ç {start_block} –¥–æ {latest_block_number}){Colors.ENDC}")
    
    observed_omens = set()
    total_interactions = 0

    pbar = tqdm(range(start_block, latest_block_number + 1), 
                desc=f"{Colors.BLUE}–¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ –∑–Ω–∞–∫–æ–≤{Colors.ENDC}",
                ncols=100)

    for block_num in pbar:
        try:
            block = w3.eth.get_block(block_num, full_transactions=True)
            for tx in block.transactions:
                if tx['to'] and w3.to_checksum_address(tx['to']) == target_focus:
                    total_interactions += 1
                    # –ö–∞–∂–¥–æ–µ "–∑–Ω–∞–º–µ–Ω–∏–µ" - —ç—Ç–æ –Ω–æ–≤—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                    omen_source = w3.to_checksum_address(tx['from'])
                    observed_omens.add(omen_source)
        except Exception as e:
            tqdm.write(f"{Colors.WARNING}–ü–æ–º–µ—Ö–∏ –≤ —ç—Ñ–∏—Ä–µ –≤ –±–ª–æ–∫–µ {block_num}: {e}{Colors.ENDC}")
            continue

    # --- –†–ê–°–®–ò–§–†–û–í–ö–ê –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø ---
    total_unique_omens = len(observed_omens)
    
    # –°—á–∏—Ç–∞–µ–º, —á—Ç–æ –≤—Å–µ –∑–Ω–∞–º–µ–Ω–∏—è, —É–≤–∏–¥–µ–Ω–Ω—ã–µ –≤ —ç—Ç–æ–º –æ–∫–Ω–µ, - –Ω–æ–≤—ã–µ.
    # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –æ—Ä–∞–∫—É–ª –º–æ–≥ –±—ã —Å–≤–µ—Ä—è—Ç—å—Å—è —Å –¥—Ä–µ–≤–Ω–∏–º–∏ —Å–≤–∏—Ç–∫–∞–º–∏ (–±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö).
    known_omens_from_past = set() 
    new_omens = observed_omens - known_omens_from_past
    
    # –ù–∞—à–∞ –∫–ª—é—á–µ–≤–∞—è –º–µ—Ç—Ä–∏–∫–∞: –ò–Ω–¥–µ–∫—Å –ü—Ä–µ–¥–≤–∏–¥–µ–Ω–∏—è!
    foresight_score = (len(new_omens) / total_unique_omens) * 100 if total_unique_omens > 0 else 0

    # --- –í–´–í–û–î –í–ï–†–î–ò–ö–¢–ê ---
    print(f"\n{Colors.HEADER}{Colors.BOLD}üìú –í–µ—Ä–¥–∏–∫—Ç –û—Ä–∞–∫—É–ª–∞:{Colors.ENDC}")
    print("~" * 50)
    print(f"–í—Å–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π —Å —Ñ–æ–∫—É—Å–æ–º: {Colors.BOLD}{Colors.GREEN}{total_interactions}{Colors.ENDC}")
    print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞–º–µ–Ω–∏–π (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π): {Colors.BOLD}{Colors.GREEN}{total_unique_omens}{Colors.ENDC}")
    
    print(f"\n{Colors.HEADER}{Colors.UNDERLINE}–ö–ª—é—á–µ–≤–æ–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:{Colors.ENDC}")
    print(f"‚ú® {Colors.WARNING}–ò–Ω–¥–µ–∫—Å –ü—Ä–µ–¥–≤–∏–¥–µ–Ω–∏—è (Foresight Score):{Colors.ENDC} "
          f"{Colors.BOLD}{foresight_score:.2f}%{Colors.ENDC}")
    print(f"   {Colors.WARNING}(–î–æ–ª—è –Ω–æ–≤—ã—Ö –∑–Ω–∞–º–µ–Ω–∏–π —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö —É–≤–∏–¥–µ–Ω–Ω—ã—Ö){Colors.ENDC}")
    print("~" * 50)
    
    if foresight_score > 85:
         print(f"{Colors.GREEN}–ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ï: –ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ–µ –∑–Ω–∞–º–µ–Ω–∏–µ! –ì—Ä—è–¥–µ—Ç —ç–ø–æ—Ö–∞ –≤–µ–ª–∏–∫–æ–≥–æ —Ä–æ—Å—Ç–∞ –∏ –ø—Ä–æ—Ü–≤–µ—Ç–∞–Ω–∏—è.{Colors.ENDC}")
    elif foresight_score > 50:
        print(f"{Colors.CYAN}–ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ï: –ó–∞—Ä–æ–∂–¥–∞—é—â–∏–π—Å—è —Ç—Ä–µ–Ω–¥. –ó–≤–µ–∑–¥—ã —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –ø—Ä–∏—Ç–æ–∫ –Ω–æ–≤—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π.{Colors.ENDC}")
    else:
        print(f"{Colors.BLUE}–ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ï: –£—Å—Ç–æ—è–≤—à–∏–π—Å—è –ø–æ—Ä—è–¥–æ–∫. –ë—É–¥—É—â–µ–µ –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è —Ç–µ–∫—É—â–∏–º–∏ —Å–∏–ª–∞–º–∏.{Colors.ENDC}")


if __name__ == "__main__":
    parser = ArgumentParser(description="OnchainOracle - —á–∏—Ç–∞–µ—Ç –∑–Ω–∞–º–µ–Ω–∏—è –≤ –±–ª–æ–∫—á–µ–π–Ω–µ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ä–æ—Å—Ç–∞.")
    parser.add_argument("focus", help="–ê–¥—Ä–µ—Å —Ñ–æ–∫—É—Å–∞ (—Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞) –¥–ª—è –≥–∞–¥–∞–Ω–∏—è.")
    parser.add_argument("-w", "--window", type=int, default=1000, help="–û–∫–Ω–æ –≥–∞–¥–∞–Ω–∏—è –≤ –±–ª–æ–∫–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1000).")
    
    args = parser.parse_args()
    
    aether_link = consult_the_aether()
    if aether_link:
        read_the_omens(aether_link, args.focus, args.window)
